
PIDvsFuzzy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000d04  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  008000c4  008000c4  00000dfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c8c  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbd  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105b  00000000  00000000  00003951  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000049ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c86  00000000  00000000  000053e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000606f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 30       	cpi	r26, 0x07	; 7
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  8a:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_adc>:

#include "global.h"

void init_adc(void)
{
	DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <adc_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	87 70       	andi	r24, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <adc_get_value+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	08 95       	ret

000000b4 <init_control_loop>:
int TARGET_TICKS;

void init_control_loop(void)
{
	// set up timer with prescaler = 1024
	TCCR0 |= (1 << CS02)|(1 << CS00);
  b4:	83 b7       	in	r24, 0x33	; 51
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	83 bf       	out	0x33, r24	; 51
	
	// initialize counter
	TCNT0 = 0;
  ba:	12 be       	out	0x32, r1	; 50
	
	// enable overflow interrupt
	TIMSK |= (1 << TOIE0);
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	89 bf       	out	0x39, r24	; 57
	DATA_STREAMING = FALSE;
  c2:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <DATA_STREAMING+0x1>
  c6:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <DATA_STREAMING>
	REVOLUTIONS_PER_MINUTE = 0;
  ca:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <REVOLUTIONS_PER_MINUTE+0x1>
  ce:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <REVOLUTIONS_PER_MINUTE>
	TICKS = 0;
  d2:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <TICKS+0x1>
  d6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <TICKS>
	TARGET_TICKS = 20;
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <TARGET_TICKS+0x1>
  e2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <TARGET_TICKS>
	// CONTROL_LOOP = CONTROL_LOOP_PID;
	CONTROL_LOOP = CONTROL_LOOP_FUZZY;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <CONTROL_LOOP>
  ec:	08 95       	ret

000000ee <__vector_1>:
}

ISR(INT0_vect)  // external interrupt_zero ISR (INT0)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	INT0_CNT++;
  fe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <INT0_CNT>
 102:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <INT0_CNT+0x1>
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <INT0_CNT+0x1>
 10c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <INT0_CNT>
	TICKS ++;
 110:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <TICKS>
 114:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <TICKS+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <TICKS+0x1>
 11e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <TICKS>
	if(INT0_CNT >= TICKS_PER_REVOLUTION)
 122:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <INT0_CNT>
 126:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <INT0_CNT+0x1>
 12a:	84 39       	cpi	r24, 0x94	; 148
 12c:	92 40       	sbci	r25, 0x02	; 2
 12e:	4c f0       	brlt	.+18     	; 0x142 <__vector_1+0x54>
	{
		REVOLUTIONS ++;
 130:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <REVOLUTIONS>
 134:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <REVOLUTIONS+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <REVOLUTIONS+0x1>
 13e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <REVOLUTIONS>
	}
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_11>:

// interrupt routine running every 16.384 ms
ISR(TIMER0_OVF_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	TIMER0_CNT ++;
 174:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <TIMER0_CNT>
 178:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <TIMER0_CNT+0x1>
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <TIMER0_CNT+0x1>
 182:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <TIMER0_CNT>
	
	switch(CONTROL_LOOP)
 186:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <CONTROL_LOOP>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	19 f0       	breq	.+6      	; 0x194 <__vector_11+0x42>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	21 f0       	breq	.+8      	; 0x19a <__vector_11+0x48>
 192:	05 c0       	rjmp	.+10     	; 0x19e <__vector_11+0x4c>
	{
		case CONTROL_LOOP_PID:
		{
			pid();
 194:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pid>
			break;
 198:	02 c0       	rjmp	.+4      	; 0x19e <__vector_11+0x4c>
		}
		case CONTROL_LOOP_FUZZY:
		{
			fuzzy();
 19a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <fuzzy>
		{
			break;
		}
	}
	
	power_supply_voltage = adc_get_value(POWER_SUPPLY_VOLTAGE_ADC_CHANNEL);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 4f 00 	call	0x9e	; 0x9e <adc_get_value>
	power_supply_voltage >>= 2;  // 8 bit compatible
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <power_supply_voltage+0x1>
 1b0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <power_supply_voltage>
	
	if(TIMER0_CNT >= 10)  // update display info every 163.84 ms
 1b4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <TIMER0_CNT>
 1b8:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <TIMER0_CNT+0x1>
 1bc:	0a 97       	sbiw	r24, 0x0a	; 10
 1be:	54 f0       	brlt	.+20     	; 0x1d4 <__vector_11+0x82>
	{
		 update_display_buffer_2d(TICKS);
 1c0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <TICKS>
 1c4:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <TICKS+0x1>
 1c8:	0e 94 26 01 	call	0x24c	; 0x24c <update_display_buffer_2d>
		TIMER0_CNT = 0;
 1cc:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <TIMER0_CNT+0x1>
 1d0:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <TIMER0_CNT>
	}
	if(DATA_STREAMING)
 1d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <DATA_STREAMING>
 1d8:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <DATA_STREAMING+0x1>
 1dc:	89 2b       	or	r24, r25
 1de:	b9 f0       	breq	.+46     	; 0x20e <__vector_11+0xbc>
	{
		usart_transmit(255);
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
		usart_transmit(TARGET_TICKS);
 1e6:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <TARGET_TICKS>
 1ea:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
		usart_transmit(TICKS);
 1ee:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <TICKS>
 1f2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <TICKS+0x1>
 1f6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
		usart_transmit((uint8_t)(power_supply_voltage));
 1fa:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <power_supply_voltage>
 1fe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
		usart_transmit(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
		usart_transmit(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	}
	TICKS = 0;
 20e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <TICKS+0x1>
 212:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <TICKS>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <init_display>:
	_delay_ms(MULTIPLEX_DELAY_MS);
	PORTB |= 0b00001111;
	PORTB &= 0b11110111;
	PORTC = DISPLAY_BUFFER[0];
	_delay_ms(MULTIPLEX_DELAY_MS);
	PORTC = 0xFF;
 238:	87 b3       	in	r24, 0x17	; 23
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	88 bb       	out	0x18, r24	; 24
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	84 bb       	out	0x14, r24	; 20
 248:	15 ba       	out	0x15, r1	; 21
 24a:	08 95       	ret

0000024c <update_display_buffer_2d>:
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ac 01       	movw	r20, r24
 252:	c4 ec       	ldi	r28, 0xC4	; 196
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	9c 01       	movw	r18, r24
 258:	ad ec       	ldi	r26, 0xCD	; 205
 25a:	bc ec       	ldi	r27, 0xCC	; 204
 25c:	0e 94 71 06 	call	0xce2	; 0xce2 <__umulhisi3>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	9c 01       	movw	r18, r24
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	82 0f       	add	r24, r18
 280:	93 1f       	adc	r25, r19
 282:	fa 01       	movw	r30, r20
 284:	e8 1b       	sub	r30, r24
 286:	f9 0b       	sbc	r31, r25
 288:	e0 5a       	subi	r30, 0xA0	; 160
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	80 81       	ld	r24, Z
 28e:	88 83       	st	Y, r24
 290:	9a 01       	movw	r18, r20
 292:	0e 94 71 06 	call	0xce2	; 0xce2 <__umulhisi3>
 296:	ac 01       	movw	r20, r24
 298:	56 95       	lsr	r21
 29a:	47 95       	ror	r20
 29c:	56 95       	lsr	r21
 29e:	47 95       	ror	r20
 2a0:	56 95       	lsr	r21
 2a2:	47 95       	ror	r20
 2a4:	9a 01       	movw	r18, r20
 2a6:	0e 94 71 06 	call	0xce2	; 0xce2 <__umulhisi3>
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	9c 01       	movw	r18, r24
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	48 1b       	sub	r20, r24
 2ce:	59 0b       	sbc	r21, r25
 2d0:	fa 01       	movw	r30, r20
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <display_2d>:
}

void display_2d()
{
	PORTB |= 0b00001111;
 2e0:	88 b3       	in	r24, 0x18	; 24
 2e2:	8f 60       	ori	r24, 0x0F	; 15
 2e4:	88 bb       	out	0x18, r24	; 24
	PORTB &= 0b11111011;
 2e6:	c2 98       	cbi	0x18, 2	; 24
	PORTC = DISPLAY_BUFFER[1];
 2e8:	e4 ec       	ldi	r30, 0xC4	; 196
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	81 81       	ldd	r24, Z+1	; 0x01
 2ee:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	8f e9       	ldi	r24, 0x9F	; 159
 2f2:	9f e0       	ldi	r25, 0x0F	; 15
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <display_2d+0x14>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <display_2d+0x1a>
 2fa:	00 00       	nop
	_delay_ms(MULTIPLEX_DELAY_MS);
	PORTB |= 0b00001111;
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	8f 60       	ori	r24, 0x0F	; 15
 300:	88 bb       	out	0x18, r24	; 24
	PORTB &= 0b11110111;
 302:	c3 98       	cbi	0x18, 3	; 24
	PORTC = DISPLAY_BUFFER[0];
 304:	80 81       	ld	r24, Z
 306:	85 bb       	out	0x15, r24	; 21
 308:	8f e9       	ldi	r24, 0x9F	; 159
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <display_2d+0x2c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <display_2d+0x32>
 312:	00 00       	nop
	_delay_ms(MULTIPLEX_DELAY_MS);
	PORTC = 0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	85 bb       	out	0x15, r24	; 21
 318:	08 95       	ret

0000031a <init_fuzzy>:
{-4, -3, -2, -1, 0, 1, 2, 3, 4},
};

void init_fuzzy(void)
{
	fuzzy_error = 0;
 31a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <fuzzy_error+0x1>
 31e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <fuzzy_error>
	fuzzy_result = 0;
 322:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <fuzzy_result+0x1>
 326:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <fuzzy_result>
 32a:	08 95       	ret

0000032c <defuzzy_error>:
	fuzzy_previous_error = fuzzy_error;
}

int defuzzy_error(const int error)
{
	if(error == 0)
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	e9 f0       	breq	.+58     	; 0x36a <defuzzy_error+0x3e>
	{
		return FUZZY_ERROR_Z;
	}
	if(error <= -23)
 330:	8a 3e       	cpi	r24, 0xEA	; 234
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	92 07       	cpc	r25, r18
 336:	e4 f0       	brlt	.+56     	; 0x370 <defuzzy_error+0x44>
	{
		return FUZZY_ERROR_NFM;
	}
	if(error <= -15)
 338:	82 3f       	cpi	r24, 0xF2	; 242
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	92 07       	cpc	r25, r18
 33e:	dc f0       	brlt	.+54     	; 0x376 <defuzzy_error+0x4a>
	{
		return FUZZY_ERROR_NM;
	}
	if(error <= -8)
 340:	89 3f       	cpi	r24, 0xF9	; 249
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	92 07       	cpc	r25, r18
 346:	d4 f0       	brlt	.+52     	; 0x37c <defuzzy_error+0x50>
	{
		return FUZZY_ERROR_Nm;
	}
	if(error < 0)
 348:	99 23       	and	r25, r25
 34a:	dc f0       	brlt	.+54     	; 0x382 <defuzzy_error+0x56>
	{
		return FUZZY_ERROR_NFm;
	}
	if(error >= 23)
 34c:	87 31       	cpi	r24, 0x17	; 23
 34e:	91 05       	cpc	r25, r1
 350:	dc f4       	brge	.+54     	; 0x388 <defuzzy_error+0x5c>
	{
		return FUZZY_ERROR_PFM;
	}
	if(error >= 15)
 352:	8f 30       	cpi	r24, 0x0F	; 15
 354:	91 05       	cpc	r25, r1
 356:	dc f4       	brge	.+54     	; 0x38e <defuzzy_error+0x62>
	{
		return FUZZY_ERROR_PM;
	}
	if(error >= 8) 
 358:	88 30       	cpi	r24, 0x08	; 8
 35a:	91 05       	cpc	r25, r1
 35c:	dc f4       	brge	.+54     	; 0x394 <defuzzy_error+0x68>
	{
		return FUZZY_ERROR_Pm;
	}
	if(error > 0)
 35e:	18 16       	cp	r1, r24
 360:	19 06       	cpc	r1, r25
 362:	dc f0       	brlt	.+54     	; 0x39a <defuzzy_error+0x6e>
	{
		return FUZZY_ERROR_PFm;
	}
	return 0;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	08 95       	ret

int defuzzy_error(const int error)
{
	if(error == 0)
	{
		return FUZZY_ERROR_Z;
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	08 95       	ret
	}
	if(error <= -23)
	{
		return FUZZY_ERROR_NFM;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret
	}
	if(error <= -15)
	{
		return FUZZY_ERROR_NM;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	08 95       	ret
	}
	if(error <= -8)
	{
		return FUZZY_ERROR_Nm;
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	08 95       	ret
	}
	if(error < 0)
	{
		return FUZZY_ERROR_NFm;
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	08 95       	ret
	}
	if(error >= 23)
	{
		return FUZZY_ERROR_PFM;
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret
	}
	if(error >= 15)
	{
		return FUZZY_ERROR_PM;
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret
	}
	if(error >= 8) 
	{
		return FUZZY_ERROR_Pm;
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret
	}
	if(error > 0)
	{
		return FUZZY_ERROR_PFm;
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 39e:	08 95       	ret

000003a0 <defuzzy_delta_error>:

int defuzzy_delta_error(const int delta_error)
{
	if(delta_error == 0)
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	79 f0       	breq	.+30     	; 0x3c2 <defuzzy_delta_error+0x22>
	{
		return FUZZY_DELTA_ERROR_Z;
	}
	if(delta_error <= -15)
 3a4:	82 3f       	cpi	r24, 0xF2	; 242
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	92 07       	cpc	r25, r18
 3aa:	74 f0       	brlt	.+28     	; 0x3c8 <defuzzy_delta_error+0x28>
	{
		return FUZZY_DELTA_ERROR_NM;
	}
	if(delta_error < 0)
 3ac:	99 23       	and	r25, r25
 3ae:	7c f0       	brlt	.+30     	; 0x3ce <defuzzy_delta_error+0x2e>
	{
		return FUZZY_DELTA_ERROR_Nm;
	}
	if(delta_error >= 15)
 3b0:	8f 30       	cpi	r24, 0x0F	; 15
 3b2:	91 05       	cpc	r25, r1
 3b4:	7c f4       	brge	.+30     	; 0x3d4 <defuzzy_delta_error+0x34>
	{
		return FUZZY_DELTA_ERROR_PM;
	}
	if(delta_error > 0)
 3b6:	18 16       	cp	r1, r24
 3b8:	19 06       	cpc	r1, r25
 3ba:	7c f0       	brlt	.+30     	; 0x3da <defuzzy_delta_error+0x3a>
	{
		return FUZZY_DELTA_ERROR_Pm;
	}
	return 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret

int defuzzy_delta_error(const int delta_error)
{
	if(delta_error == 0)
	{
		return FUZZY_DELTA_ERROR_Z;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	08 95       	ret
	}
	if(delta_error <= -15)
	{
		return FUZZY_DELTA_ERROR_NM;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 95       	ret
	}
	if(delta_error < 0)
	{
		return FUZZY_DELTA_ERROR_Nm;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret
	}
	if(delta_error >= 15)
	{
		return FUZZY_DELTA_ERROR_PM;
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	08 95       	ret
	}
	if(delta_error > 0)
	{
		return FUZZY_DELTA_ERROR_Pm;
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 3de:	08 95       	ret

000003e0 <fuzzy>:
	fuzzy_error = 0;
	fuzzy_result = 0;
}

void fuzzy(void)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
	fuzzy_error = TARGET_TICKS - TICKS;
 3e8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <TICKS>
 3ec:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <TICKS+0x1>
 3f0:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <TARGET_TICKS>
 3f4:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <TARGET_TICKS+0x1>
 3f8:	82 1b       	sub	r24, r18
 3fa:	93 0b       	sbc	r25, r19
 3fc:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <fuzzy_error+0x1>
 400:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <fuzzy_error>
	if(fuzzy_error < -FUZZY_ERROR_CLAMPING)  // error clamping
 404:	82 3e       	cpi	r24, 0xE2	; 226
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	92 07       	cpc	r25, r18
 40a:	3c f4       	brge	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		fuzzy_error = -FUZZY_ERROR_CLAMPING;
 40c:	82 ee       	ldi	r24, 0xE2	; 226
 40e:	9f ef       	ldi	r25, 0xFF	; 255
 410:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <fuzzy_error+0x1>
 414:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <fuzzy_error>
 418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	}
	if(fuzzy_error > FUZZY_ERROR_CLAMPING)
 41a:	4f 97       	sbiw	r24, 0x1f	; 31
 41c:	34 f0       	brlt	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		fuzzy_error = FUZZY_ERROR_CLAMPING;
 41e:	8e e1       	ldi	r24, 0x1E	; 30
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <fuzzy_error+0x1>
 426:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <fuzzy_error>
	}
	
	fuzzy_delta_error = fuzzy_previous_error - fuzzy_error;
 42a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <fuzzy_error>
 42e:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <fuzzy_error+0x1>
 432:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <fuzzy_previous_error>
 436:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <fuzzy_previous_error+0x1>
 43a:	08 1b       	sub	r16, r24
 43c:	19 0b       	sbc	r17, r25
 43e:	10 93 fe 00 	sts	0x00FE, r17	; 0x8000fe <fuzzy_delta_error+0x1>
 442:	00 93 fd 00 	sts	0x00FD, r16	; 0x8000fd <fuzzy_delta_error>
	
	fuzzy_error_index = defuzzy_error(fuzzy_error);
 446:	0e 94 96 01 	call	0x32c	; 0x32c <defuzzy_error>
 44a:	ec 01       	movw	r28, r24
 44c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <fuzzy_error_index+0x1>
 450:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <fuzzy_error_index>
	fuzzy_delta_error_index = defuzzy_delta_error(fuzzy_delta_error);
 454:	c8 01       	movw	r24, r16
 456:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <defuzzy_delta_error>
 45a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <fuzzy_delta_error_index+0x1>
 45e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <fuzzy_delta_error_index>
	
	fuzzy_result = fuzzy_table[fuzzy_delta_error_index][fuzzy_error_index];
 462:	9c 01       	movw	r18, r24
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	82 0f       	add	r24, r18
 472:	93 1f       	adc	r25, r19
 474:	c8 0f       	add	r28, r24
 476:	d9 1f       	adc	r29, r25
 478:	cc 0f       	add	r28, r28
 47a:	dd 1f       	adc	r29, r29
 47c:	c6 59       	subi	r28, 0x96	; 150
 47e:	df 4f       	sbci	r29, 0xFF	; 255
 480:	88 81       	ld	r24, Y
 482:	99 81       	ldd	r25, Y+1	; 0x01
 484:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <fuzzy_result+0x1>
 488:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <fuzzy_result>
	
	OCR1B += 2 * fuzzy_result;
 48c:	28 b5       	in	r18, 0x28	; 40
 48e:	39 b5       	in	r19, 0x29	; 41
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	99 bd       	out	0x29, r25	; 41
 49a:	88 bd       	out	0x28, r24	; 40
	fuzzy_previous_error = fuzzy_error;
 49c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <fuzzy_error>
 4a0:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <fuzzy_error+0x1>
 4a4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <fuzzy_previous_error+0x1>
 4a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <fuzzy_previous_error>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <main>:
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	81 ee       	ldi	r24, 0xE1	; 225
 4ba:	94 e0       	ldi	r25, 0x04	; 4
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0x6>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x10>
 4c6:	00 00       	nop


int main(void)
{
	_delay_ms(100);
	init_adc();
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <init_adc>
	init_control_loop();
 4cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_control_loop>
	init_display();
 4d0:	0e 94 1c 01 	call	0x238	; 0x238 <init_display>
	init_fuzzy();
 4d4:	0e 94 8d 01 	call	0x31a	; 0x31a <init_fuzzy>
	init_optocoupler();
 4d8:	0e 94 84 02 	call	0x508	; 0x508 <init_optocoupler>
    init_pid();
 4dc:	0e 94 97 02 	call	0x52e	; 0x52e <init_pid>
	init_pwm();
 4e0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <init_pwm>
	init_usart(MYUBRR);
 4e4:	89 e1       	ldi	r24, 0x19	; 25
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <init_usart>
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	83 ec       	ldi	r24, 0xC3	; 195
 4f0:	99 e0       	ldi	r25, 0x09	; 9
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <main+0x3c>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0x46>
 4fc:	00 00       	nop
	
	_delay_ms(200);
	UCSRB |= (1 << RXCIE); // Enable the USART receive Complete interrupt (USART_RXC)
 4fe:	57 9a       	sbi	0x0a, 7	; 10
	
	sei();
 500:	78 94       	sei
	
    while (1) 
    {
		display_2d();
 502:	0e 94 70 01 	call	0x2e0	; 0x2e0 <display_2d>
 506:	fd cf       	rjmp	.-6      	; 0x502 <main+0x4c>

00000508 <init_optocoupler>:
#include "optocoupler_driver.h"


void init_optocoupler(void)
{
	INT0_CNT = 0;
 508:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <INT0_CNT+0x1>
 50c:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <INT0_CNT>
	REVOLUTIONS = 0;
 510:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <REVOLUTIONS+0x1>
 514:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <REVOLUTIONS>
	TICKS = 0;
 518:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <TICKS+0x1>
 51c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <TICKS>
	
	DDRD &= 0b11111011;  // configure INT0 as input
 520:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= 0b0000100;
 522:	92 9a       	sbi	0x12, 2	; 18
	GICR = 1 << INT0;
 524:	80 e4       	ldi	r24, 0x40	; 64
 526:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1 << ISC00);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	85 bf       	out	0x35, r24	; 53
 52c:	08 95       	ret

0000052e <init_pid>:
float pid_previous_error;
float pid_result;

void init_pid(void)
{
	KP = 50;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a8 e4       	ldi	r26, 0x48	; 72
 534:	b2 e4       	ldi	r27, 0x42	; 66
 536:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <KP>
 53a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <KP+0x1>
 53e:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <KP+0x2>
 542:	b0 93 e9 00 	sts	0x00E9, r27	; 0x8000e9 <KP+0x3>
	KI = 1.2;
 546:	8a e9       	ldi	r24, 0x9A	; 154
 548:	99 e9       	ldi	r25, 0x99	; 153
 54a:	a9 e9       	ldi	r26, 0x99	; 153
 54c:	bf e3       	ldi	r27, 0x3F	; 63
 54e:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <KI>
 552:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <KI+0x1>
 556:	a0 93 fb 00 	sts	0x00FB, r26	; 0x8000fb <KI+0x2>
 55a:	b0 93 fc 00 	sts	0x00FC, r27	; 0x8000fc <KI+0x3>
	KD = 10;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a0 e2       	ldi	r26, 0x20	; 32
 564:	b1 e4       	ldi	r27, 0x41	; 65
 566:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <KD>
 56a:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <KD+0x1>
 56e:	a0 93 d6 00 	sts	0x00D6, r26	; 0x8000d6 <KD+0x2>
 572:	b0 93 d7 00 	sts	0x00D7, r27	; 0x8000d7 <KD+0x3>

	pid_error = 0;
 576:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <pid_error>
 57a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <pid_error+0x1>
 57e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <pid_error+0x2>
 582:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <pid_error+0x3>
	pid_integral = 0;
 586:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <pid_integral>
 58a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <pid_integral+0x1>
 58e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <pid_integral+0x2>
 592:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <pid_integral+0x3>
	pid_derivative = 0;
 596:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <pid_derivative>
 59a:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <pid_derivative+0x1>
 59e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <pid_derivative+0x2>
 5a2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <pid_derivative+0x3>
	pid_previous_error = 0;
 5a6:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <pid_previous_error>
 5aa:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <pid_previous_error+0x1>
 5ae:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <pid_previous_error+0x2>
 5b2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <pid_previous_error+0x3>
	pid_result = 0;
 5b6:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <pid_result>
 5ba:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <pid_result+0x1>
 5be:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <pid_result+0x2>
 5c2:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <pid_result+0x3>
 5c6:	08 95       	ret

000005c8 <pid>:
}

void pid(void)
{
 5c8:	4f 92       	push	r4
 5ca:	5f 92       	push	r5
 5cc:	6f 92       	push	r6
 5ce:	7f 92       	push	r7
 5d0:	8f 92       	push	r8
 5d2:	9f 92       	push	r9
 5d4:	af 92       	push	r10
 5d6:	bf 92       	push	r11
 5d8:	cf 92       	push	r12
 5da:	df 92       	push	r13
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
	pid_error = TARGET_TICKS - TICKS;
 5e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <TICKS>
 5e4:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <TICKS+0x1>
 5e8:	60 91 f7 00 	lds	r22, 0x00F7	; 0x8000f7 <TARGET_TICKS>
 5ec:	70 91 f8 00 	lds	r23, 0x00F8	; 0x8000f8 <TARGET_TICKS+0x1>
 5f0:	68 1b       	sub	r22, r24
 5f2:	79 0b       	sbc	r23, r25
 5f4:	07 2e       	mov	r0, r23
 5f6:	00 0c       	add	r0, r0
 5f8:	88 0b       	sbc	r24, r24
 5fa:	99 0b       	sbc	r25, r25
 5fc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__floatsisf>
 600:	6b 01       	movw	r12, r22
 602:	7c 01       	movw	r14, r24
 604:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <pid_error>
 608:	70 93 ee 00 	sts	0x00EE, r23	; 0x8000ee <pid_error+0x1>
 60c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <pid_error+0x2>
 610:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <pid_error+0x3>
	if(pid_error == 0)
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	a9 01       	movw	r20, r18
 61a:	0e 94 19 05 	call	0xa32	; 0xa32 <__cmpsf2>
 61e:	88 23       	and	r24, r24
 620:	09 f4       	brne	.+2      	; 0x624 <pid+0x5c>
 622:	bc c0       	rjmp	.+376    	; 0x79c <pid+0x1d4>
	{
		return;
	}
	pid_integral += pid_error;
 624:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <pid_integral>
 628:	30 91 f4 00 	lds	r19, 0x00F4	; 0x8000f4 <pid_integral+0x1>
 62c:	40 91 f5 00 	lds	r20, 0x00F5	; 0x8000f5 <pid_integral+0x2>
 630:	50 91 f6 00 	lds	r21, 0x00F6	; 0x8000f6 <pid_integral+0x3>
 634:	c7 01       	movw	r24, r14
 636:	b6 01       	movw	r22, r12
 638:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
 63c:	4b 01       	movw	r8, r22
 63e:	5c 01       	movw	r10, r24
	if(pid_integral > PID_INTEGRAL_MAX_CLAMPING)  // pid loop integral clamping
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e8       	ldi	r19, 0x80	; 128
 644:	4b eb       	ldi	r20, 0xBB	; 187
 646:	54 e4       	ldi	r21, 0x44	; 68
 648:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__gesf2>
 64c:	18 16       	cp	r1, r24
 64e:	4c f0       	brlt	.+18     	; 0x662 <pid+0x9a>
	pid_error = TARGET_TICKS - TICKS;
	if(pid_error == 0)
	{
		return;
	}
	pid_integral += pid_error;
 650:	80 92 f3 00 	sts	0x00F3, r8	; 0x8000f3 <pid_integral>
 654:	90 92 f4 00 	sts	0x00F4, r9	; 0x8000f4 <pid_integral+0x1>
 658:	a0 92 f5 00 	sts	0x00F5, r10	; 0x8000f5 <pid_integral+0x2>
 65c:	b0 92 f6 00 	sts	0x00F6, r11	; 0x8000f6 <pid_integral+0x3>
 660:	0c c0       	rjmp	.+24     	; 0x67a <pid+0xb2>
	if(pid_integral > PID_INTEGRAL_MAX_CLAMPING)  // pid loop integral clamping
	{
		pid_integral = PID_INTEGRAL_MAX_CLAMPING;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e8       	ldi	r25, 0x80	; 128
 666:	ab eb       	ldi	r26, 0xBB	; 187
 668:	b4 e4       	ldi	r27, 0x44	; 68
 66a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <pid_integral>
 66e:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <pid_integral+0x1>
 672:	a0 93 f5 00 	sts	0x00F5, r26	; 0x8000f5 <pid_integral+0x2>
 676:	b0 93 f6 00 	sts	0x00F6, r27	; 0x8000f6 <pid_integral+0x3>
	}
	pid_derivative = pid_previous_error - pid_error;
 67a:	a7 01       	movw	r20, r14
 67c:	96 01       	movw	r18, r12
 67e:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <pid_previous_error>
 682:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <pid_previous_error+0x1>
 686:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <pid_previous_error+0x2>
 68a:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <pid_previous_error+0x3>
 68e:	0e 94 ac 04 	call	0x958	; 0x958 <__subsf3>
 692:	4b 01       	movw	r8, r22
 694:	5c 01       	movw	r10, r24
 696:	60 93 e2 00 	sts	0x00E2, r22	; 0x8000e2 <pid_derivative>
 69a:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <pid_derivative+0x1>
 69e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <pid_derivative+0x2>
 6a2:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <pid_derivative+0x3>
	pid_result = (KP * pid_error) + (KI * pid_integral) + (KD * pid_derivative);
 6a6:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <pid_integral>
 6aa:	30 91 f4 00 	lds	r19, 0x00F4	; 0x8000f4 <pid_integral+0x1>
 6ae:	40 91 f5 00 	lds	r20, 0x00F5	; 0x8000f5 <pid_integral+0x2>
 6b2:	50 91 f6 00 	lds	r21, 0x00F6	; 0x8000f6 <pid_integral+0x3>
 6b6:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <KI>
 6ba:	70 91 fa 00 	lds	r23, 0x00FA	; 0x8000fa <KI+0x1>
 6be:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <KI+0x2>
 6c2:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <KI+0x3>
 6c6:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 6ca:	2b 01       	movw	r4, r22
 6cc:	3c 01       	movw	r6, r24
 6ce:	20 91 e6 00 	lds	r18, 0x00E6	; 0x8000e6 <KP>
 6d2:	30 91 e7 00 	lds	r19, 0x00E7	; 0x8000e7 <KP+0x1>
 6d6:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <KP+0x2>
 6da:	50 91 e9 00 	lds	r21, 0x00E9	; 0x8000e9 <KP+0x3>
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	c3 01       	movw	r24, r6
 6ec:	b2 01       	movw	r22, r4
 6ee:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
 6f2:	6b 01       	movw	r12, r22
 6f4:	7c 01       	movw	r14, r24
 6f6:	20 91 d4 00 	lds	r18, 0x00D4	; 0x8000d4 <KD>
 6fa:	30 91 d5 00 	lds	r19, 0x00D5	; 0x8000d5 <KD+0x1>
 6fe:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <KD+0x2>
 702:	50 91 d7 00 	lds	r21, 0x00D7	; 0x8000d7 <KD+0x3>
 706:	c5 01       	movw	r24, r10
 708:	b4 01       	movw	r22, r8
 70a:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 70e:	9b 01       	movw	r18, r22
 710:	ac 01       	movw	r20, r24
 712:	c7 01       	movw	r24, r14
 714:	b6 01       	movw	r22, r12
 716:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
 71a:	6b 01       	movw	r12, r22
 71c:	7c 01       	movw	r14, r24
	if(pid_result < 0)
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	a9 01       	movw	r20, r18
 724:	0e 94 19 05 	call	0xa32	; 0xa32 <__cmpsf2>
 728:	88 23       	and	r24, r24
 72a:	4c f0       	brlt	.+18     	; 0x73e <pid+0x176>
	if(pid_integral > PID_INTEGRAL_MAX_CLAMPING)  // pid loop integral clamping
	{
		pid_integral = PID_INTEGRAL_MAX_CLAMPING;
	}
	pid_derivative = pid_previous_error - pid_error;
	pid_result = (KP * pid_error) + (KI * pid_integral) + (KD * pid_derivative);
 72c:	c0 92 d8 00 	sts	0x00D8, r12	; 0x8000d8 <pid_result>
 730:	d0 92 d9 00 	sts	0x00D9, r13	; 0x8000d9 <pid_result+0x1>
 734:	e0 92 da 00 	sts	0x00DA, r14	; 0x8000da <pid_result+0x2>
 738:	f0 92 db 00 	sts	0x00DB, r15	; 0x8000db <pid_result+0x3>
 73c:	08 c0       	rjmp	.+16     	; 0x74e <pid+0x186>
	if(pid_result < 0)
	{
		pid_result = 0;
 73e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <pid_result>
 742:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <pid_result+0x1>
 746:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <pid_result+0x2>
 74a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <pid_result+0x3>
	}
	
	OCR1B = (unsigned int) (pid_result);
 74e:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <pid_result>
 752:	70 91 d9 00 	lds	r23, 0x00D9	; 0x8000d9 <pid_result+0x1>
 756:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <pid_result+0x2>
 75a:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <pid_result+0x3>
 75e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fixunssfsi>
 762:	79 bd       	out	0x29, r23	; 41
 764:	68 bd       	out	0x28, r22	; 40
	
	if(OCR1B > ICR1)
 766:	28 b5       	in	r18, 0x28	; 40
 768:	39 b5       	in	r19, 0x29	; 41
 76a:	86 b5       	in	r24, 0x26	; 38
 76c:	97 b5       	in	r25, 0x27	; 39
 76e:	82 17       	cp	r24, r18
 770:	93 07       	cpc	r25, r19
 772:	20 f4       	brcc	.+8      	; 0x77c <pid+0x1b4>
	{
		OCR1B = ICR1;
 774:	86 b5       	in	r24, 0x26	; 38
 776:	97 b5       	in	r25, 0x27	; 39
 778:	99 bd       	out	0x29, r25	; 41
 77a:	88 bd       	out	0x28, r24	; 40
	}
	pid_previous_error = pid_error;
 77c:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <pid_error>
 780:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <pid_error+0x1>
 784:	a0 91 ef 00 	lds	r26, 0x00EF	; 0x8000ef <pid_error+0x2>
 788:	b0 91 f0 00 	lds	r27, 0x00F0	; 0x8000f0 <pid_error+0x3>
 78c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <pid_previous_error>
 790:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <pid_previous_error+0x1>
 794:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <pid_previous_error+0x2>
 798:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <pid_previous_error+0x3>
}
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	9f 90       	pop	r9
 7aa:	8f 90       	pop	r8
 7ac:	7f 90       	pop	r7
 7ae:	6f 90       	pop	r6
 7b0:	5f 90       	pop	r5
 7b2:	4f 90       	pop	r4
 7b4:	08 95       	ret

000007b6 <init_pwm>:

#include "global.h"

void init_pwm(void)
{
	DDRD |= 0b00110000;
 7b6:	81 b3       	in	r24, 0x11	; 17
 7b8:	80 63       	ori	r24, 0x30	; 48
 7ba:	81 bb       	out	0x11, r24	; 17
	ICR1 = 1200; /*CUSTOM TOP OF TIMER1*/
 7bc:	80 eb       	ldi	r24, 0xB0	; 176
 7be:	94 e0       	ldi	r25, 0x04	; 4
 7c0:	97 bd       	out	0x27, r25	; 39
 7c2:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10100010; /*SET PWM ON BOTH PD4 AND PD5*/
 7c4:	82 ea       	ldi	r24, 0xA2	; 162
 7c6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011001; /*0x19*/
 7c8:	89 e1       	ldi	r24, 0x19	; 25
 7ca:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0; /*FACTOR DE UMPLERE PWM1: 0:ICR1*/
 7cc:	1b bc       	out	0x2b, r1	; 43
 7ce:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0; /*FACTOR DE UMPLERE PWM2: 0:ICR1*/
 7d0:	19 bc       	out	0x29, r1	; 41
 7d2:	18 bc       	out	0x28, r1	; 40
 7d4:	08 95       	ret

000007d6 <init_usart>:
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
	;
	/* Get and return received data from buffer */
	return UDR;
}
 7d6:	90 bd       	out	0x20, r25	; 32
 7d8:	89 b9       	out	0x09, r24	; 9
 7da:	88 e1       	ldi	r24, 0x18	; 24
 7dc:	8a b9       	out	0x0a, r24	; 10
 7de:	8e e8       	ldi	r24, 0x8E	; 142
 7e0:	80 bd       	out	0x20, r24	; 32
 7e2:	08 95       	ret

000007e4 <usart_transmit>:
 7e4:	5d 9b       	sbis	0x0b, 5	; 11
 7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <usart_transmit>
 7e8:	8c b9       	out	0x0c, r24	; 12
 7ea:	08 95       	ret

000007ec <transmit_fuzzy_table>:

void transmit_fuzzy_table(void)
{
 7ec:	cf 92       	push	r12
 7ee:	df 92       	push	r13
 7f0:	ef 92       	push	r14
 7f2:	ff 92       	push	r15
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	ca e6       	ldi	r28, 0x6A	; 106
 7fc:	d0 e0       	ldi	r29, 0x00	; 0
 7fe:	0f 2e       	mov	r0, r31
 800:	f4 ec       	ldi	r31, 0xC4	; 196
 802:	cf 2e       	mov	r12, r31
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	df 2e       	mov	r13, r31
 808:	f0 2d       	mov	r31, r0
 80a:	0f c0       	rjmp	.+30     	; 0x82a <transmit_fuzzy_table+0x3e>
	
	for(int i = 0; i < 5; i ++)
	{
		for(int j = 0; j < 9; j++)
		{
			fuzzy_value = fuzzy_table[i][j];
 80c:	18 81       	ld	r17, Y
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	22 96       	adiw	r28, 0x02	; 2
			fuzzy_value_l = (unsigned char)(fuzzy_value);
			fuzzy_value_h = (unsigned char)((fuzzy_value >> 8));
			
			usart_transmit(fuzzy_value_h);
 812:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
			usart_transmit(fuzzy_value_l);
 816:	81 2f       	mov	r24, r17
 818:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	unsigned char fuzzy_value_h;
	unsigned char fuzzy_value_l;
	
	for(int i = 0; i < 5; i ++)
	{
		for(int j = 0; j < 9; j++)
 81c:	ce 15       	cp	r28, r14
 81e:	df 05       	cpc	r29, r15
 820:	a9 f7       	brne	.-22     	; 0x80c <transmit_fuzzy_table+0x20>
 822:	e7 01       	movw	r28, r14
{
	int fuzzy_value;
	unsigned char fuzzy_value_h;
	unsigned char fuzzy_value_l;
	
	for(int i = 0; i < 5; i ++)
 824:	ce 14       	cp	r12, r14
 826:	df 04       	cpc	r13, r15
 828:	29 f0       	breq	.+10     	; 0x834 <transmit_fuzzy_table+0x48>
 82a:	7e 01       	movw	r14, r28
 82c:	22 e1       	ldi	r18, 0x12	; 18
 82e:	e2 0e       	add	r14, r18
 830:	f1 1c       	adc	r15, r1
 832:	ec cf       	rjmp	.-40     	; 0x80c <transmit_fuzzy_table+0x20>
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	93 ed       	ldi	r25, 0xD3	; 211
 838:	20 e3       	ldi	r18, 0x30	; 48
 83a:	81 50       	subi	r24, 0x01	; 1
 83c:	90 40       	sbci	r25, 0x00	; 0
 83e:	20 40       	sbci	r18, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <transmit_fuzzy_table+0x4e>
 842:	00 c0       	rjmp	.+0      	; 0x844 <transmit_fuzzy_table+0x58>
 844:	00 00       	nop
			usart_transmit(fuzzy_value_h);
			usart_transmit(fuzzy_value_l);
		}
	}
	_delay_ms(1000);
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	ff 90       	pop	r15
 84e:	ef 90       	pop	r14
 850:	df 90       	pop	r13
 852:	cf 90       	pop	r12
 854:	08 95       	ret

00000856 <transmit_pid_constants>:

void transmit_pid_constants(void)
{
 856:	1f 93       	push	r17
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
	unsigned char buffer[4];
	
	memcpy(buffer, &KP, 4 );
 85c:	e6 ee       	ldi	r30, 0xE6	; 230
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	11 81       	ldd	r17, Z+1	; 0x01
 862:	d2 81       	ldd	r29, Z+2	; 0x02
 864:	c3 81       	ldd	r28, Z+3	; 0x03
	usart_transmit(buffer[0]);
 866:	80 81       	ld	r24, Z
 868:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[1]);
 86c:	81 2f       	mov	r24, r17
 86e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[2]);
 872:	8d 2f       	mov	r24, r29
 874:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[3]);
 878:	8c 2f       	mov	r24, r28
 87a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	
	memcpy(buffer, &KI, 4 );
 87e:	e9 ef       	ldi	r30, 0xF9	; 249
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	11 81       	ldd	r17, Z+1	; 0x01
 884:	d2 81       	ldd	r29, Z+2	; 0x02
 886:	c3 81       	ldd	r28, Z+3	; 0x03
	usart_transmit(buffer[0]);
 888:	80 81       	ld	r24, Z
 88a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[1]);
 88e:	81 2f       	mov	r24, r17
 890:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[2]);
 894:	8d 2f       	mov	r24, r29
 896:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[3]);
 89a:	8c 2f       	mov	r24, r28
 89c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	
	memcpy(buffer, &KD, 4 );
 8a0:	e4 ed       	ldi	r30, 0xD4	; 212
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	11 81       	ldd	r17, Z+1	; 0x01
 8a6:	d2 81       	ldd	r29, Z+2	; 0x02
 8a8:	c3 81       	ldd	r28, Z+3	; 0x03
	usart_transmit(buffer[0]);
 8aa:	80 81       	ld	r24, Z
 8ac:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[1]);
 8b0:	81 2f       	mov	r24, r17
 8b2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[2]);
 8b6:	8d 2f       	mov	r24, r29
 8b8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
	usart_transmit(buffer[3]);
 8bc:	8c 2f       	mov	r24, r28
 8be:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <usart_transmit>
}
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	08 95       	ret

000008ca <__vector_13>:

ISR(USART_RXC_vect)
{
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	6f 93       	push	r22
 8de:	7f 93       	push	r23
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
 8e4:	af 93       	push	r26
 8e6:	bf 93       	push	r27
 8e8:	cf 93       	push	r28
 8ea:	ef 93       	push	r30
 8ec:	ff 93       	push	r31
	// Code to be executed when the USART receives a byte here
	unsigned char received_data;
	received_data = UDR; // Fetch the received byte value
 8ee:	cc b1       	in	r28, 0x0c	; 12
	if(received_data)
 8f0:	cc 23       	and	r28, r28
 8f2:	01 f1       	breq	.+64     	; 0x934 <__vector_13+0x6a>
	{
		update_display_buffer_2d(received_data);
 8f4:	8c 2f       	mov	r24, r28
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 26 01 	call	0x24c	; 0x24c <update_display_buffer_2d>
	}
	switch(received_data)
 8fc:	ca 30       	cpi	r28, 0x0A	; 10
 8fe:	a9 f0       	breq	.+42     	; 0x92a <__vector_13+0x60>
 900:	cc 30       	cpi	r28, 0x0C	; 12
 902:	b1 f0       	breq	.+44     	; 0x930 <__vector_13+0x66>
 904:	c5 30       	cpi	r28, 0x05	; 5
 906:	b1 f4       	brne	.+44     	; 0x934 <__vector_13+0x6a>
	{
		case 5:
		{
			if(DATA_STREAMING == TRUE)
 908:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <DATA_STREAMING>
 90c:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <DATA_STREAMING+0x1>
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	29 f4       	brne	.+10     	; 0x91e <__vector_13+0x54>
			{
				DATA_STREAMING = FALSE;
 914:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <DATA_STREAMING+0x1>
 918:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <DATA_STREAMING>
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__vector_13+0x60>
			}
			else
			{
				DATA_STREAMING = TRUE;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <DATA_STREAMING+0x1>
 926:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <DATA_STREAMING>
			}
		}
		case 10:
		{
			transmit_fuzzy_table();
 92a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <transmit_fuzzy_table>
			break;
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__vector_13+0x6a>
		}
		case 12:
		{
			transmit_pid_constants();
 930:	0e 94 2b 04 	call	0x856	; 0x856 <transmit_pid_constants>
			break;
		}
	}
 934:	ff 91       	pop	r31
 936:	ef 91       	pop	r30
 938:	cf 91       	pop	r28
 93a:	bf 91       	pop	r27
 93c:	af 91       	pop	r26
 93e:	9f 91       	pop	r25
 940:	8f 91       	pop	r24
 942:	7f 91       	pop	r23
 944:	6f 91       	pop	r22
 946:	5f 91       	pop	r21
 948:	4f 91       	pop	r20
 94a:	3f 91       	pop	r19
 94c:	2f 91       	pop	r18
 94e:	0f 90       	pop	r0
 950:	0f be       	out	0x3f, r0	; 63
 952:	0f 90       	pop	r0
 954:	1f 90       	pop	r1
 956:	18 95       	reti

00000958 <__subsf3>:
 958:	50 58       	subi	r21, 0x80	; 128

0000095a <__addsf3>:
 95a:	bb 27       	eor	r27, r27
 95c:	aa 27       	eor	r26, r26
 95e:	0e 94 c4 04 	call	0x988	; 0x988 <__addsf3x>
 962:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 966:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 96a:	38 f0       	brcs	.+14     	; 0x97a <__addsf3+0x20>
 96c:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 970:	20 f0       	brcs	.+8      	; 0x97a <__addsf3+0x20>
 972:	39 f4       	brne	.+14     	; 0x982 <__addsf3+0x28>
 974:	9f 3f       	cpi	r25, 0xFF	; 255
 976:	19 f4       	brne	.+6      	; 0x97e <__addsf3+0x24>
 978:	26 f4       	brtc	.+8      	; 0x982 <__addsf3+0x28>
 97a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 97e:	0e f4       	brtc	.+2      	; 0x982 <__addsf3+0x28>
 980:	e0 95       	com	r30
 982:	e7 fb       	bst	r30, 7
 984:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>

00000988 <__addsf3x>:
 988:	e9 2f       	mov	r30, r25
 98a:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 98e:	58 f3       	brcs	.-42     	; 0x966 <__addsf3+0xc>
 990:	ba 17       	cp	r27, r26
 992:	62 07       	cpc	r22, r18
 994:	73 07       	cpc	r23, r19
 996:	84 07       	cpc	r24, r20
 998:	95 07       	cpc	r25, r21
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__addsf3x+0x1c>
 99c:	79 f4       	brne	.+30     	; 0x9bc <__addsf3x+0x34>
 99e:	a6 f5       	brtc	.+104    	; 0xa08 <__addsf3x+0x80>
 9a0:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_zero>
 9a4:	0e f4       	brtc	.+2      	; 0x9a8 <__addsf3x+0x20>
 9a6:	e0 95       	com	r30
 9a8:	0b 2e       	mov	r0, r27
 9aa:	ba 2f       	mov	r27, r26
 9ac:	a0 2d       	mov	r26, r0
 9ae:	0b 01       	movw	r0, r22
 9b0:	b9 01       	movw	r22, r18
 9b2:	90 01       	movw	r18, r0
 9b4:	0c 01       	movw	r0, r24
 9b6:	ca 01       	movw	r24, r20
 9b8:	a0 01       	movw	r20, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	ff 27       	eor	r31, r31
 9be:	59 1b       	sub	r21, r25
 9c0:	99 f0       	breq	.+38     	; 0x9e8 <__addsf3x+0x60>
 9c2:	59 3f       	cpi	r21, 0xF9	; 249
 9c4:	50 f4       	brcc	.+20     	; 0x9da <__addsf3x+0x52>
 9c6:	50 3e       	cpi	r21, 0xE0	; 224
 9c8:	68 f1       	brcs	.+90     	; 0xa24 <__addsf3x+0x9c>
 9ca:	1a 16       	cp	r1, r26
 9cc:	f0 40       	sbci	r31, 0x00	; 0
 9ce:	a2 2f       	mov	r26, r18
 9d0:	23 2f       	mov	r18, r19
 9d2:	34 2f       	mov	r19, r20
 9d4:	44 27       	eor	r20, r20
 9d6:	58 5f       	subi	r21, 0xF8	; 248
 9d8:	f3 cf       	rjmp	.-26     	; 0x9c0 <__addsf3x+0x38>
 9da:	46 95       	lsr	r20
 9dc:	37 95       	ror	r19
 9de:	27 95       	ror	r18
 9e0:	a7 95       	ror	r26
 9e2:	f0 40       	sbci	r31, 0x00	; 0
 9e4:	53 95       	inc	r21
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__addsf3x+0x52>
 9e8:	7e f4       	brtc	.+30     	; 0xa08 <__addsf3x+0x80>
 9ea:	1f 16       	cp	r1, r31
 9ec:	ba 0b       	sbc	r27, r26
 9ee:	62 0b       	sbc	r22, r18
 9f0:	73 0b       	sbc	r23, r19
 9f2:	84 0b       	sbc	r24, r20
 9f4:	ba f0       	brmi	.+46     	; 0xa24 <__addsf3x+0x9c>
 9f6:	91 50       	subi	r25, 0x01	; 1
 9f8:	a1 f0       	breq	.+40     	; 0xa22 <__addsf3x+0x9a>
 9fa:	ff 0f       	add	r31, r31
 9fc:	bb 1f       	adc	r27, r27
 9fe:	66 1f       	adc	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	c2 f7       	brpl	.-16     	; 0x9f6 <__addsf3x+0x6e>
 a06:	0e c0       	rjmp	.+28     	; 0xa24 <__addsf3x+0x9c>
 a08:	ba 0f       	add	r27, r26
 a0a:	62 1f       	adc	r22, r18
 a0c:	73 1f       	adc	r23, r19
 a0e:	84 1f       	adc	r24, r20
 a10:	48 f4       	brcc	.+18     	; 0xa24 <__addsf3x+0x9c>
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f7 95       	ror	r31
 a1c:	9e 3f       	cpi	r25, 0xFE	; 254
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <__addsf3x+0x9a>
 a20:	b0 cf       	rjmp	.-160    	; 0x982 <__addsf3+0x28>
 a22:	93 95       	inc	r25
 a24:	88 0f       	add	r24, r24
 a26:	08 f0       	brcs	.+2      	; 0xa2a <__addsf3x+0xa2>
 a28:	99 27       	eor	r25, r25
 a2a:	ee 0f       	add	r30, r30
 a2c:	97 95       	ror	r25
 a2e:	87 95       	ror	r24
 a30:	08 95       	ret

00000a32 <__cmpsf2>:
 a32:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_cmp>
 a36:	08 f4       	brcc	.+2      	; 0xa3a <__cmpsf2+0x8>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	08 95       	ret

00000a3c <__fixunssfsi>:
 a3c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 a40:	88 f0       	brcs	.+34     	; 0xa64 <__fixunssfsi+0x28>
 a42:	9f 57       	subi	r25, 0x7F	; 127
 a44:	98 f0       	brcs	.+38     	; 0xa6c <__fixunssfsi+0x30>
 a46:	b9 2f       	mov	r27, r25
 a48:	99 27       	eor	r25, r25
 a4a:	b7 51       	subi	r27, 0x17	; 23
 a4c:	b0 f0       	brcs	.+44     	; 0xa7a <__fixunssfsi+0x3e>
 a4e:	e1 f0       	breq	.+56     	; 0xa88 <__fixunssfsi+0x4c>
 a50:	66 0f       	add	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	1a f0       	brmi	.+6      	; 0xa60 <__fixunssfsi+0x24>
 a5a:	ba 95       	dec	r27
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__fixunssfsi+0x14>
 a5e:	14 c0       	rjmp	.+40     	; 0xa88 <__fixunssfsi+0x4c>
 a60:	b1 30       	cpi	r27, 0x01	; 1
 a62:	91 f0       	breq	.+36     	; 0xa88 <__fixunssfsi+0x4c>
 a64:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_zero>
 a68:	b1 e0       	ldi	r27, 0x01	; 1
 a6a:	08 95       	ret
 a6c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_zero>
 a70:	67 2f       	mov	r22, r23
 a72:	78 2f       	mov	r23, r24
 a74:	88 27       	eor	r24, r24
 a76:	b8 5f       	subi	r27, 0xF8	; 248
 a78:	39 f0       	breq	.+14     	; 0xa88 <__fixunssfsi+0x4c>
 a7a:	b9 3f       	cpi	r27, 0xF9	; 249
 a7c:	cc f3       	brlt	.-14     	; 0xa70 <__fixunssfsi+0x34>
 a7e:	86 95       	lsr	r24
 a80:	77 95       	ror	r23
 a82:	67 95       	ror	r22
 a84:	b3 95       	inc	r27
 a86:	d9 f7       	brne	.-10     	; 0xa7e <__fixunssfsi+0x42>
 a88:	3e f4       	brtc	.+14     	; 0xa98 <__fixunssfsi+0x5c>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <__floatunsisf>:
 a9a:	e8 94       	clt
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <__floatsisf+0x12>

00000a9e <__floatsisf>:
 a9e:	97 fb       	bst	r25, 7
 aa0:	3e f4       	brtc	.+14     	; 0xab0 <__floatsisf+0x12>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	99 23       	and	r25, r25
 ab2:	a9 f0       	breq	.+42     	; 0xade <__floatsisf+0x40>
 ab4:	f9 2f       	mov	r31, r25
 ab6:	96 e9       	ldi	r25, 0x96	; 150
 ab8:	bb 27       	eor	r27, r27
 aba:	93 95       	inc	r25
 abc:	f6 95       	lsr	r31
 abe:	87 95       	ror	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b7 95       	ror	r27
 ac6:	f1 11       	cpse	r31, r1
 ac8:	f8 cf       	rjmp	.-16     	; 0xaba <__floatsisf+0x1c>
 aca:	fa f4       	brpl	.+62     	; 0xb0a <__floatsisf+0x6c>
 acc:	bb 0f       	add	r27, r27
 ace:	11 f4       	brne	.+4      	; 0xad4 <__floatsisf+0x36>
 ad0:	60 ff       	sbrs	r22, 0
 ad2:	1b c0       	rjmp	.+54     	; 0xb0a <__floatsisf+0x6c>
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	16 c0       	rjmp	.+44     	; 0xb0a <__floatsisf+0x6c>
 ade:	88 23       	and	r24, r24
 ae0:	11 f0       	breq	.+4      	; 0xae6 <__floatsisf+0x48>
 ae2:	96 e9       	ldi	r25, 0x96	; 150
 ae4:	11 c0       	rjmp	.+34     	; 0xb08 <__floatsisf+0x6a>
 ae6:	77 23       	and	r23, r23
 ae8:	21 f0       	breq	.+8      	; 0xaf2 <__floatsisf+0x54>
 aea:	9e e8       	ldi	r25, 0x8E	; 142
 aec:	87 2f       	mov	r24, r23
 aee:	76 2f       	mov	r23, r22
 af0:	05 c0       	rjmp	.+10     	; 0xafc <__floatsisf+0x5e>
 af2:	66 23       	and	r22, r22
 af4:	71 f0       	breq	.+28     	; 0xb12 <__floatsisf+0x74>
 af6:	96 e8       	ldi	r25, 0x86	; 134
 af8:	86 2f       	mov	r24, r22
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	2a f0       	brmi	.+10     	; 0xb0a <__floatsisf+0x6c>
 b00:	9a 95       	dec	r25
 b02:	66 0f       	add	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	88 1f       	adc	r24, r24
 b08:	da f7       	brpl	.-10     	; 0xb00 <__floatsisf+0x62>
 b0a:	88 0f       	add	r24, r24
 b0c:	96 95       	lsr	r25
 b0e:	87 95       	ror	r24
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret

00000b14 <__fp_cmp>:
 b14:	99 0f       	add	r25, r25
 b16:	00 08       	sbc	r0, r0
 b18:	55 0f       	add	r21, r21
 b1a:	aa 0b       	sbc	r26, r26
 b1c:	e0 e8       	ldi	r30, 0x80	; 128
 b1e:	fe ef       	ldi	r31, 0xFE	; 254
 b20:	16 16       	cp	r1, r22
 b22:	17 06       	cpc	r1, r23
 b24:	e8 07       	cpc	r30, r24
 b26:	f9 07       	cpc	r31, r25
 b28:	c0 f0       	brcs	.+48     	; 0xb5a <__fp_cmp+0x46>
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	e4 07       	cpc	r30, r20
 b30:	f5 07       	cpc	r31, r21
 b32:	98 f0       	brcs	.+38     	; 0xb5a <__fp_cmp+0x46>
 b34:	62 1b       	sub	r22, r18
 b36:	73 0b       	sbc	r23, r19
 b38:	84 0b       	sbc	r24, r20
 b3a:	95 0b       	sbc	r25, r21
 b3c:	39 f4       	brne	.+14     	; 0xb4c <__fp_cmp+0x38>
 b3e:	0a 26       	eor	r0, r26
 b40:	61 f0       	breq	.+24     	; 0xb5a <__fp_cmp+0x46>
 b42:	23 2b       	or	r18, r19
 b44:	24 2b       	or	r18, r20
 b46:	25 2b       	or	r18, r21
 b48:	21 f4       	brne	.+8      	; 0xb52 <__fp_cmp+0x3e>
 b4a:	08 95       	ret
 b4c:	0a 26       	eor	r0, r26
 b4e:	09 f4       	brne	.+2      	; 0xb52 <__fp_cmp+0x3e>
 b50:	a1 40       	sbci	r26, 0x01	; 1
 b52:	a6 95       	lsr	r26
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	81 1d       	adc	r24, r1
 b58:	81 1d       	adc	r24, r1
 b5a:	08 95       	ret

00000b5c <__fp_inf>:
 b5c:	97 f9       	bld	r25, 7
 b5e:	9f 67       	ori	r25, 0x7F	; 127
 b60:	80 e8       	ldi	r24, 0x80	; 128
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	08 95       	ret

00000b68 <__fp_nan>:
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	08 95       	ret

00000b6e <__fp_pscA>:
 b6e:	00 24       	eor	r0, r0
 b70:	0a 94       	dec	r0
 b72:	16 16       	cp	r1, r22
 b74:	17 06       	cpc	r1, r23
 b76:	18 06       	cpc	r1, r24
 b78:	09 06       	cpc	r0, r25
 b7a:	08 95       	ret

00000b7c <__fp_pscB>:
 b7c:	00 24       	eor	r0, r0
 b7e:	0a 94       	dec	r0
 b80:	12 16       	cp	r1, r18
 b82:	13 06       	cpc	r1, r19
 b84:	14 06       	cpc	r1, r20
 b86:	05 06       	cpc	r0, r21
 b88:	08 95       	ret

00000b8a <__fp_round>:
 b8a:	09 2e       	mov	r0, r25
 b8c:	03 94       	inc	r0
 b8e:	00 0c       	add	r0, r0
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0xc>
 b92:	88 23       	and	r24, r24
 b94:	52 f0       	brmi	.+20     	; 0xbaa <__fp_round+0x20>
 b96:	bb 0f       	add	r27, r27
 b98:	40 f4       	brcc	.+16     	; 0xbaa <__fp_round+0x20>
 b9a:	bf 2b       	or	r27, r31
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0x18>
 b9e:	60 ff       	sbrs	r22, 0
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__fp_round+0x20>
 ba2:	6f 5f       	subi	r22, 0xFF	; 255
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__fp_split3>:
 bac:	57 fd       	sbrc	r21, 7
 bae:	90 58       	subi	r25, 0x80	; 128
 bb0:	44 0f       	add	r20, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
 bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
 bbc:	88 0f       	add	r24, r24
 bbe:	97 fb       	bst	r25, 7
 bc0:	99 1f       	adc	r25, r25
 bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
 bc8:	87 95       	ror	r24
 bca:	08 95       	ret
 bcc:	12 16       	cp	r1, r18
 bce:	13 06       	cpc	r1, r19
 bd0:	14 06       	cpc	r1, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
 bd6:	46 95       	lsr	r20
 bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
 bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	99 1f       	adc	r25, r25
 be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
 be6:	86 95       	lsr	r24
 be8:	71 05       	cpc	r23, r1
 bea:	61 05       	cpc	r22, r1
 bec:	08 94       	sec
 bee:	08 95       	ret

00000bf0 <__fp_zero>:
 bf0:	e8 94       	clt

00000bf2 <__fp_szero>:
 bf2:	bb 27       	eor	r27, r27
 bf4:	66 27       	eor	r22, r22
 bf6:	77 27       	eor	r23, r23
 bf8:	cb 01       	movw	r24, r22
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__gesf2>:
 bfe:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_cmp>
 c02:	08 f4       	brcc	.+2      	; 0xc06 <__gesf2+0x8>
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <__mulsf3>:
 c08:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3x>
 c0c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 c10:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 c14:	38 f0       	brcs	.+14     	; 0xc24 <__mulsf3+0x1c>
 c16:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__mulsf3+0x1c>
 c1c:	95 23       	and	r25, r21
 c1e:	11 f0       	breq	.+4      	; 0xc24 <__mulsf3+0x1c>
 c20:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 c24:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 c28:	11 24       	eor	r1, r1
 c2a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>

00000c2e <__mulsf3x>:
 c2e:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 c32:	70 f3       	brcs	.-36     	; 0xc10 <__mulsf3+0x8>

00000c34 <__mulsf3_pse>:
 c34:	95 9f       	mul	r25, r21
 c36:	c1 f3       	breq	.-16     	; 0xc28 <__mulsf3+0x20>
 c38:	95 0f       	add	r25, r21
 c3a:	50 e0       	ldi	r21, 0x00	; 0
 c3c:	55 1f       	adc	r21, r21
 c3e:	62 9f       	mul	r22, r18
 c40:	f0 01       	movw	r30, r0
 c42:	72 9f       	mul	r23, r18
 c44:	bb 27       	eor	r27, r27
 c46:	f0 0d       	add	r31, r0
 c48:	b1 1d       	adc	r27, r1
 c4a:	63 9f       	mul	r22, r19
 c4c:	aa 27       	eor	r26, r26
 c4e:	f0 0d       	add	r31, r0
 c50:	b1 1d       	adc	r27, r1
 c52:	aa 1f       	adc	r26, r26
 c54:	64 9f       	mul	r22, r20
 c56:	66 27       	eor	r22, r22
 c58:	b0 0d       	add	r27, r0
 c5a:	a1 1d       	adc	r26, r1
 c5c:	66 1f       	adc	r22, r22
 c5e:	82 9f       	mul	r24, r18
 c60:	22 27       	eor	r18, r18
 c62:	b0 0d       	add	r27, r0
 c64:	a1 1d       	adc	r26, r1
 c66:	62 1f       	adc	r22, r18
 c68:	73 9f       	mul	r23, r19
 c6a:	b0 0d       	add	r27, r0
 c6c:	a1 1d       	adc	r26, r1
 c6e:	62 1f       	adc	r22, r18
 c70:	83 9f       	mul	r24, r19
 c72:	a0 0d       	add	r26, r0
 c74:	61 1d       	adc	r22, r1
 c76:	22 1f       	adc	r18, r18
 c78:	74 9f       	mul	r23, r20
 c7a:	33 27       	eor	r19, r19
 c7c:	a0 0d       	add	r26, r0
 c7e:	61 1d       	adc	r22, r1
 c80:	23 1f       	adc	r18, r19
 c82:	84 9f       	mul	r24, r20
 c84:	60 0d       	add	r22, r0
 c86:	21 1d       	adc	r18, r1
 c88:	82 2f       	mov	r24, r18
 c8a:	76 2f       	mov	r23, r22
 c8c:	6a 2f       	mov	r22, r26
 c8e:	11 24       	eor	r1, r1
 c90:	9f 57       	subi	r25, 0x7F	; 127
 c92:	50 40       	sbci	r21, 0x00	; 0
 c94:	9a f0       	brmi	.+38     	; 0xcbc <__mulsf3_pse+0x88>
 c96:	f1 f0       	breq	.+60     	; 0xcd4 <__mulsf3_pse+0xa0>
 c98:	88 23       	and	r24, r24
 c9a:	4a f0       	brmi	.+18     	; 0xcae <__mulsf3_pse+0x7a>
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	bb 1f       	adc	r27, r27
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	91 50       	subi	r25, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	a9 f7       	brne	.-22     	; 0xc98 <__mulsf3_pse+0x64>
 cae:	9e 3f       	cpi	r25, 0xFE	; 254
 cb0:	51 05       	cpc	r21, r1
 cb2:	80 f0       	brcs	.+32     	; 0xcd4 <__mulsf3_pse+0xa0>
 cb4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 cb8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 cbc:	5f 3f       	cpi	r21, 0xFF	; 255
 cbe:	e4 f3       	brlt	.-8      	; 0xcb8 <__mulsf3_pse+0x84>
 cc0:	98 3e       	cpi	r25, 0xE8	; 232
 cc2:	d4 f3       	brlt	.-12     	; 0xcb8 <__mulsf3_pse+0x84>
 cc4:	86 95       	lsr	r24
 cc6:	77 95       	ror	r23
 cc8:	67 95       	ror	r22
 cca:	b7 95       	ror	r27
 ccc:	f7 95       	ror	r31
 cce:	e7 95       	ror	r30
 cd0:	9f 5f       	subi	r25, 0xFF	; 255
 cd2:	c1 f7       	brne	.-16     	; 0xcc4 <__mulsf3_pse+0x90>
 cd4:	fe 2b       	or	r31, r30
 cd6:	88 0f       	add	r24, r24
 cd8:	91 1d       	adc	r25, r1
 cda:	96 95       	lsr	r25
 cdc:	87 95       	ror	r24
 cde:	97 f9       	bld	r25, 7
 ce0:	08 95       	ret

00000ce2 <__umulhisi3>:
 ce2:	a2 9f       	mul	r26, r18
 ce4:	b0 01       	movw	r22, r0
 ce6:	b3 9f       	mul	r27, r19
 ce8:	c0 01       	movw	r24, r0
 cea:	a3 9f       	mul	r26, r19
 cec:	70 0d       	add	r23, r0
 cee:	81 1d       	adc	r24, r1
 cf0:	11 24       	eor	r1, r1
 cf2:	91 1d       	adc	r25, r1
 cf4:	b2 9f       	mul	r27, r18
 cf6:	70 0d       	add	r23, r0
 cf8:	81 1d       	adc	r24, r1
 cfa:	11 24       	eor	r1, r1
 cfc:	91 1d       	adc	r25, r1
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
